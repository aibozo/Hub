name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Format
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --workspace -D warnings
      - name: Build
        run: cargo build --workspace --all-features
      - name: Test
        run: cargo test --workspace --all-features

  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
      - name: Lint (ruff)
        run: ruff . || true
      - name: Format (black --check)
        run: black --check . || true
      - name: Test voice-daemon
        working-directory: mcp-servers/python/voice_daemon
        run: |
          if [ -f pyproject.toml ]; then pip install -e .[dev] && pytest -q || true; fi
      - name: Test arxiv-server
        working-directory: mcp-servers/python/arxiv_server
        run: |
          if [ -f pyproject.toml ]; then pip install -e .[dev] && pytest -q || true; fi
      - name: Smoke news-server
        working-directory: mcp-servers/python/news_server
        run: |
          if [ -f pyproject.toml ]; then pip install -e . || true; fi
          python - << 'PY'
import json,subprocess
req = json.dumps({"tool":"sources","params":{}}).encode()
p = subprocess.Popen(["python","-m","news_server"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
out,_ = p.communicate(req, timeout=5)
assert json.loads(out).get("ok") is True
print("news-server ok")
PY
      - name: Smoke installer-server
        working-directory: mcp-servers/python/installer_server
        run: |
          if [ -f pyproject.toml ]; then pip install -e . || true; fi
          python - << 'PY'
import json,subprocess
req = json.dumps({"tool":"plan_install","params":{"pkg":"ripgrep","manager":"apt"}}).encode()
p = subprocess.Popen(["python","-m","installer_server"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
out,_ = p.communicate(req, timeout=5)
resp = json.loads(out)
assert resp.get("ok") is True and "plan_id" in resp.get("result",{})
print("installer-server ok")
PY
      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            target/
